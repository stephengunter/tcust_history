<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmers Guide</Title>
      <Description>Programmers Guide provides code samples about key programming concepts to build .NET and other applications that use Aspose.Pdf.</Description>
      <FolderName>ProgrammersGuide</FolderName>
      <Order>1</Order>
      <Folders>
        <Folder>
          <Title>Working With Aspose.Pdf</Title>
          <Description>Samples and Examples for using Aspose.PDF in your applications.</Description>
          <FolderName>WorkingWithAsposePDF</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Working With Pages</Title>
              <Description>This section includes sample examples for all the page level operations which could be performed using Aspose.PDF</Description>
              <FolderName>WorkingWithPages</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>Concatenate PDF Files</Title>
                  <Description>Example explaining concatenation of two PDF files.</Description>
                  <FolderName>ConcatenatePdfFiles</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Concatenate PDF Files</DisplayName>
                    <Url>Concatenate+PDF+Files</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input1.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\input2.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Number of Pages of a PDF File</Title>
                  <Description>In order to get the number of pages of a PDF file, you need to open the PDF file using Document class. After that, you can use Count property of the Pages Collection of Document object to get the total number of pages in the document.</Description>
                  <FolderName>GetNumberofPagesofaPDFFile</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Get Number of Pages of a PDF File</DisplayName>
                    <Url>Get+Number+of+Pages+of+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input1.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Page Properties</Title>
                  <Description>The Page Class provides all the properties related to a particular page of a PDF document. All the pages of the PDF files are contained by Pages Collection of the Document object. We can access either individual Page object by Index value, from this collection, or loop through the collection, using foreach loop, and get all the pages. Once an individual page is accessed, we can get its properties.</Description>
                  <FolderName>GetPageProperties</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Get Page Properties</DisplayName>
                    <Url>Get+Page+Properties</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input1.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Insert an Empty Page in a PDF File</Title>
                  <Description>Insert method of the Pages Collection allows you to insert an empty page in a PDF document. You need to pass the location of the newly inserted blank page to the Insert method. First of all, create a Document object with the input PDF file, in which you want to add the blank page. Then, call the Insert method of the Pages Collection of this Document object. Finally, save the output PDF using Save method.</Description>
                  <FolderName>InsertEmptyPageInPDFFile</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Insert an Empty Page in a PDF File</DisplayName>
                    <Url>Insert+an+Empty+Page+in+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Insert an Empty Page at the End of a PDF File</Title>
                  <Description>If you want to insert an empty page at the end of the PDF file, you only need to call Add method of the Pages Collection of Document object, without any parameters. First, you need to create a Document object with the input PDF file in which you want to add the blank page. Then, you have to call Add method of the Pages Collection, and finally save the output PDF using Save method.</Description>
                  <FolderName>InsertEmptyPageAtEndofPDFFile</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Insert an Empty Page at the End of a PDF File</DisplayName>
                    <Url>Insert+an+Empty+Page+at+the+End+of+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Split PDF File to Individual Pages</Title>
                  <Description>In order to split a PDF file into single page PDF files, you need to loop through the Pages Collection of the Document object. In each iteration you need to create a new Document object and add the individual Page in this empty document. After that, you need to save the new PDF using Save method.</Description>
                  <FolderName>SplitPDFFiletoIndividualPages</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Split PDF File to Individual Pages</DisplayName>
                    <Url>Split+PDF+File+to+Individual+Pages</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\page_1.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\page_2.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get a Particular Page of the PDF File</Title>
                  <Description>Pages Collection of the Document object returns all the pages of the PDF file. In order to get a particular page from this collection you need to specify its Index. Once you get a particular page, you need to create a new Document object and add this Page object into the Document object and save the output using Save method.</Description>
                  <FolderName>GetParticularPageOfPDFFile</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Get a Particular Page of the PDF File</DisplayName>
                    <Url>Get+a+Particular+Page+of+the+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Delete a Particular Page from the PDF File</Title>
                  <Description>In order to delete a particular page from the Pages Collection, you need to call the Delete method and specify the Index of the particular page you want to delete. After that call Save method to save the updated PDF file.</Description>
                  <FolderName>DeleteParticularPageFromPDFFile</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Delete a Particular Page from the PDF File</DisplayName>
                    <Url>Delete+a+Particular+Page+from+the+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Update Page Dimensions</Title>
                  <Description>The Page contains a method named SetPageSize(...) which provides the feature/capability to set the page size/dimensions. In following code snippet, we will load the source PDF file, get page collection into PageCollection object, get particular page whose dimensions we need to update, and then we will call SetPageSize(..) method to update its dimensions. Finally we will call the Save(..) method of Document class to generate the PDF file with updated page dimensions.</Description>
                  <FolderName>UpdatePageDimensions</FolderName>
                  <Order>9</Order>
                  <DocLink>
                    <DisplayName>Update Page Dimensions</DisplayName>
                    <Url>Update+Page+Dimensions</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Add image as page background</Title>
                  <Description>A PDF document is a collection of pages and each page contains collection of artifacts. We have a class named BackgroundArtifact which can be used to add background image to page object.</Description>
                  <FolderName>AddImageAsPageBackground</FolderName>
                  <Order>10</Order>
                  <DocLink>
                    <DisplayName>Add image as page background</DisplayName>
                    <Url>Add+image+as+page+background</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\aspose-total-for-net.jpg</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working With Images</Title>
              <Description>This section includes the sample examples for all image related operations which could be performed using Aspose.Pdf.</Description>
              <FolderName>WorkingWithImages</FolderName>
              <Order>2</Order>
              <Examples>
                <Example>
                  <Title>Convert All PDF Pages to JPEG Images</Title>
                  <Description>The JpegDevice class allows you to convert PDF pages to JPEG images using Aspose.Pdf. This class provides a method named Process which allows you to convert a particular page of the PDF file to JPEG image. If you want to convert all the pages to the images, you need to loop through all the pages of the PDF and then convert each page individually. You first need to create an object of Document class, so you could get the particular page which you want to convert to JPEG. After that, you need to call the Process method to convert the page to JPEG image.</Description>
                  <FolderName>ConvertPagesToImages</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Convert all PDF pages to JPEG Images</DisplayName>
                    <Url>Convert+all+PDF+pages+to+JPEG+Images</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\image1.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\image2.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\image3.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working With Text</Title>
              <Description>This section includes sample examples for all the text operations which could be performed using Aspose.PDF</Description>
              <FolderName>WorkingWithText</FolderName>
              <Order>3</Order>
              <Examples>
                <Example>
                  <Title>Replace Text in All Pages of PDF</Title>
                  <Description>In order to replace text in all the pages of a PDF document, you first need to use TextFragmentAbsorber to find the particular phrase you want to replace. After that, you need to go through all the TextFragments to replace the text and change any other attributes. Once you have done that, you only need to save the output PDF using Save method of the Document object. The example elaborates this in detail to replace text in a PDF document.</Description>
                  <FolderName>ReplaceTextInAllPages</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Replace Text in All Pages of a PDF Document</DisplayName>
                    <Url>Replace+Text+in+All+Pages+of+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Extract Text From All the Pages of a PDF Document</Title>
                  <Description>Extracting text from a PDF document is a common requirement. In this example, you will see how Aspose.Pdf for .NET allows to extract text from all the pages of a PDF document. You need to create an object of TextAbsorber class. After that, open the PDF using Document class and call Accept method of the Pages collection. The TextAbsorber class absorbs the text from the document and returns in Text property.</Description>
                  <FolderName>ExtractTextFromAllPagesOfPDF</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Extract Text From All the Pages of a PDF Document</DisplayName>
                    <Url>Extract+Text+From+All+the+Pages+of+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\extracted-text.txt</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Extract Text from an Individual Page of the PDF Document</Title>
                  <Description>TextAbsorber class allows you to extract text from a particular page of a PDF document. This class returns the extracted text in Text property. The Accept method of an individual page is called to extract the text. Create objects of Document and TextAbsorber classes. Call Accept method on the individual page, as PageIndex , of Document object. The Index is the particular page number from where text needs to be extracted. You can get text from the Text property of the TextAbsorber class.</Description>
                  <FolderName>ExtractTextFromIndividualPageOfPDF</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Extract Text from an Individual Page of the PDF Document</DisplayName>
                    <Url>Extract+Text+from+an+Individual+Page+of+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\extracted-text.txt</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Search and Get Text from All the Pages of PDF Document</Title>
                  <Description>TextFragmentAbsorber allows you to find text, matching a particular phrase, from all the pages of a PDF document. In order to search text from the whole document, you need to call the Accept method of Pages collection. The Accept method takes TextFragmentAbsorber object as parameter, which returns a collection of TextFragment objects. You can loop through all the fragments and get their properties like Text , Position ( XIndent , YIndent ), FontName , FontSize , IsAccessible , IsEmbedded , IsSubset , ForegroundColor ** etc.</Description>
                  <FolderName>SearchAndGetTextFromAllPagesOfPDF</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Search and Get Text from All the Pages of PDF Document</DisplayName>
                    <Url>Search+and+Get+Text+from+All+the+Pages+of+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Search and Get Text from a Single Page of a PDF Document</Title>
                  <Description>TextFragmentAbsorber allows you to find text, matching a particular phrase, from a particular page of a PDF document. In order to search text from an individual page, you need to call the Accept method of that particular as Page Index . The Index represents a particular page number. The Accept method takes TextFragmentAbsorber object as parameter, which returns a collection of TextFragment objects. You can loop through all the fragments and get their properties like Text , Position ( XIndent , YIndent ), FontName , FontSize , IsAccessible , IsEmbedded , IsSubset , ForegroundColor ** etc.</Description>
                  <FolderName>SearchAndGetTextFromSinglePageOfPDF</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Search and Get Text from a Single Page of a PDF Document</DisplayName>
                    <Url>Search+and+Get+Text+from+a+Single+Page+of+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Search and Get Text Segments from All Pages of PDF Document</Title>
                  <Description>In order to search text segments from all the pages, you first need to get the TextFragment objects from the document . TextFragmentAbsorber allows you to find text, matching a particular phrase, from all the pages of a PDF document. In order to search text from the whole document, you need to call the Accept method of Pages collection. The Accept method takes TextFragmentAbsorber object as parameter, which returns a collection of TextFragment objects.</Description>
                  <FolderName>SearchAndGetTextSegmentsFromAllPagesOfPDF</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Search and Get Text Segments from All Pages of PDF Document</DisplayName>
                    <Url>Search+and+Get+Text+Segments+from+All+Pages+of+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Search and Get Text Segments From an Individual Page of PDF Document</Title>
                  <Description>In order to search text segments from a single page, you first need to get the TextFragment objects from the document . TextFragmentAbsorber allows you to find text, matching a particular phrase, from an individual page of a PDF document. In order to search text from a particular page, you need to call the Accept method of that particular page as Pages Index . Index represents the page number from where text needs to be extracted. The Accept method takes TextFragmentAbsorber object as parameter, which returns a collection of TextFragment objects.</Description>
                  <FolderName>SearchAndGetTextSegmentsFromIndividualPageOfPDF</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Search and Get Text Segments From an Individual Page of PDF Document</DisplayName>
                    <Url>Search+and+Get+Text+Segments+From+an+Individual+Page+of+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Search and get Text from all pages using Regular Expression</Title>
                  <Description>TextFragmentAbsorber helps you search and retrieve text, from all the pages, based on regular expression. First you need to pass a regular expression to TextFragmentAbsorber constructor as the phrase. After that you have to set the TextSearchOptions property of the TextFragmentAbsorber object. This property requires TextSearchOptions object and you need to pass true as parameter to its constructor while creating new object. As you want to retrieve matching text from all the pages, you need to call Accept method of Pages collection. TextFragmentAbsorber returns a TextFragmentCollection containing all the fragments matching the criteria specified by the regular expression.</Description>
                  <FolderName>SearchAndGetTextFromAllPagesUsingRegularExpression</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Search and get Text from all pages using Regular Expression</DisplayName>
                    <Url>Search+and+get+Text+from+all+pages+using+Regular+Expression</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Search and Get Text from a Single Page Using Regular Expression</Title>
                  <Description>TextFragmentAbsorber helps you search and retrieve text, from a single page, based on regular expression. First you need to pass a regular expression to TextFragmentAbsorber constructor as the phrase. After that you have to set the TextSearchOptions property of the TextFragmentAbsorber object. This property requires TextSearchOptions object and you need to pass true as parameter to its constructor while creating new object. As you want to retrieve matching text from a particular page, you need to call Accept method of that individual page as Pages Index. Index represents the page number. TextFragmentAbsorber returns a TextFragmentCollection containing all the fragments matching the criteria specified by the regular expression</Description>
                  <FolderName>SearchAndGetTextFromSinglePageUsingRegularExpression</FolderName>
                  <Order>9</Order>
                  <DocLink>
                    <DisplayName>Search and Get Text from a Single Page Using Regular Expression</DisplayName>
                    <Url>Search+and+Get+Text+from+a+Single+Page+Using+Regular+Expression</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Replace Text in a Single Page of a PDF Document</Title>
                  <Description>N order to replace text in a single page, you need to get TextFragments of that particular page. For that matter, you first need to create TextFragmentAbsorber with the phrase you want to replace. Once you get all the TextFragments , you can loop though them and replace the text and other attributes. After that, you need to save the updated PDF using Save method of Document object.</Description>
                  <FolderName>ReplaceTextInSinglePageOfPDF</FolderName>
                  <Order>10</Order>
                  <DocLink>
                    <DisplayName>Replace Text in a Single Page of a PDF Document</DisplayName>
                    <Url>Replace+Text+in+a+Single+Page+of+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working with Document Conversion</Title>
              <Description>This section includes examples related to the following topics: 

- Convert PCL file to PDF format
- Convert PDF file into DOC format
- Convert PDF file into HTML format
- Convert PDF file into TeX format
- Convert PDF File to PDF-A
- Convert SVG file to PDF format
- Convert XPS files to PDF format</Description>
              <FolderName>WorkWithDocumentConversion</FolderName>
              <Order>4</Order>
              <Examples>
                <Example>
                  <Title>Convert PDF file into DOC format</Title>
                  <Description>Aspose.Pdf for .NET provides two liner code to transform source PDF file into resultant .DOC file. In order to accomplish this feature, a new enumeration named SaveFormat has been introduced and its value .Doc enables us to save the source file into MS word format. This examples describes the saving of PDF to .DOC using two liner code and also depicts the use of SaveOptions and other parameters that could be used in saving a PDF to .DOC</Description>
                  <FolderName>ConvertPDFToDOC</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Convert PDF file into DOC format</DisplayName>
                    <Url>Convert+PDF+file+into+DOC+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\saveOptionsOutput.doc</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\simpleOutput.doc</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert PCL file to PDF format</Title>
                  <Description>PCL (Printer Command Language) is a Hewlett-Packard printer language has developed to access standard printer features. PCL levels 1 through 5e/5c are command based languages using control sequences that are processed and interpreted in the order they are received. At a consumer level, PCL data streams are generated by a print driver. PCL output can also be easily generated by custom applications

In order to accomplish this feature, we have introduced a class named PclLoadOptions which is used to initialize LoadOptions object. Later on this object is passed as an argument during Document object initialization and it helps the PDF rendering engine to determine the input format of source document. This example shows the process of converting PCL file into PDF format in detail.</Description>
                  <FolderName>ConvertPCLToPDF</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Convert PCL file to PDF format</DisplayName>
                    <Url>Convert+PCL+file+to+PDF+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\test.pcl</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\test-converted.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert PDF file into HTML format</Title>
                  <Description>Keeping alive the tradition of making things simple and understandable, Aspose.Pdf for .NET provides two liner code to transform source PDF file into resultant .Html file. In order to accomplish this requirement, the enumeration named SaveFormat contains a value .Html which will enable you to save the source file into Html format. This example demonstrates PDF to HTML conversion.</Description>
                  <FolderName>ConvertPDFToHTML</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Convert PDF file into HTML format</DisplayName>
                    <Url>Convert+PDF+file+into+HTML+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output_files\style.css</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\output_files\img_02.svg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\output_files\img_01.svg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\output.html</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert XPS files to PDF format</Title>
                  <Description>The XPS file type is primarily associated with 'XML Paper Specification' by Microsoft Corporation. The XML Paper Specification (XPS), formerly codenamed Metro and subsuming the Next Generation Print Path (NGPP) marketing concept, is Microsoft's initiative to integrate document creation and viewing into its Windows operating system.

In order to convert XPS to PDF with the help of Aspose.Pdf, we have introduced a class named XpsLoadOptions which is used to initialize LoadOptions object. Later on this object is passed as an argument during Document object initialization and it helps the PDF rendering engine to determine the input format of source document. This example depicts the conversion using Aspose.Pdf</Description>
                  <FolderName>ConvertXPSToPDF</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Convert XPS files to PDF format</DisplayName>
                    <Url>Convert+XPS+files+to+PDF+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\test.xps</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\resultant.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert PDF File to PDF-A</Title>
                  <Description>Aspose.Pdf allows you to convert the PDF file to PDF/A-1b compliant PDF file. You can convert the PDF using Convert method of the Document class. Before converting the PDF to PDF/A compliant file, you need to validate the PDF using Validate method. The validation result is stored in the XML file and then this result is also passed to the Convert method. You can also specify the action for the elements which cannot be converted using ConvertErrorAction enumeration. This example elaborates the conversion from PDF to PDF-A using Aspose.Pdf</Description>
                  <FolderName>ConvertPDFToPDFA</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Convert PDF File to PDF-A</DisplayName>
                    <Url>Convert+PDF+File+to+PDF-A</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\log.xml</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert PDF to ePUB format</Title>
                  <Description>Aspose.Pdf for .NET also supports the feature to convert PDF document to EPUB format. Aspose.Pdf for .NET has a class named EpubSaveOptions which can be used as second argument to Document.Save(..) method, in order to generate ePUB file.</Description>
                  <FolderName>ConvertPDFToEPUB</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Convert PDF to ePUB format</DisplayName>
                    <Url>Convert+PDF+to+ePUB+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\Sample.epub</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert SVG file to PDF format</Title>
                  <Description>To convert SVG files to PDF, use the class named SvgLoadOptions which is used to initialize the LoadOptions object. Later, this object is passed as an argument during the Document object initialization and helps the PDF rendering engine to determine the input format of the source document.</Description>
                  <FolderName>ConvertSVGToPDF</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Convert SVG file to PDF format</DisplayName>
                    <Url>Convert+SVG+file+to+PDF+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\Example.svg</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\converted.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get SVG dimensions</Title>
                  <Description>We can also get the dimensions information of source SVG file being used. This information can be useful if we want the SVG to cover the entire page of resultant PDF document. A property named AdjustPageSize is present in SvgLoadOption class which fulfills this requirement. The default value of this property is false. If the value is set to true, then resultant PDF document will have same size (dimensions) as source svg file.</Description>
                  <FolderName>GetSVGDimensions</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Convert SVG file to PDF format</DisplayName>
                    <Url>Convert+SVG+file+to+PDF+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\Example.svg</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\SVG_test.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert PDF file into TeX format</Title>
                  <Description>The LaTeX file format is a text file format with markup in the LaTeX 2ε derivative of the TeX family of languages and LaTeX is a derived format of the TeX system.</Description>
                  <FolderName>ConvertPDFToTeX</FolderName>
                  <Order>9</Order>
                  <DocLink>
                    <DisplayName>Convert PDF file into TeX format</DisplayName>
                    <Url>Convert+PDF+file+into+TeX+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\Output.tex</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert EPUB file to PDF format</Title>
                  <Description>To converting EPUB files to PDF format, Aspose.Pdf for .NET has a class named EpubLoadOptions which is used to initialize a LoadOptions object. After that, the object is passed as an argument during the Document object initialization and helps the PDF rendering engine determine the source document's input format.</Description>
                  <FolderName>ConvertEPUBToPDF</FolderName>
                  <Order>10</Order>
                  <DocLink>
                    <DisplayName>Convert EPUB file to PDF format</DisplayName>
                    <Url>Convert+EPUB+file+to+PDF+format</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\Sample.epub</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working with Annotations</Title>
              <Description>This section includes the following topics:

1: Add Annotation in an Existing PDF File
2: Get Particular Annotation from a PDF File
3: Get All Annotations from the Page of a PDF document
4: Delete a Particular Annotation from the PDF File
5: Delete All Annotations from a Page of a PDF File
6: Add swf file as annotation to PDF document
7: Set Formatting of FreeTextAnnotation</Description>
              <FolderName>WorkingWithAnnotations</FolderName>
              <Order>5</Order>
              <Examples>
                <Example>
                  <Title>Add Annotation in an Existing PDF File</Title>
                  <Description>The annotations are contained by the Annotations collection of a particular Page. This collection contains the annotations for that individual page only; every page has its own Annotations collection. In order to add an annotation in a particular page, you need to add it to the Annotations collection of that page using Addmethod. So first step is to create a particular annotation, which you want to add to the PDF. Then open the input PDF file and add this annotation to the Page's Annotations collection.</Description>
                  <FolderName>AddAnnotationInExistingPDFFile</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Add Annotation in an Existing PDF File</DisplayName>
                    <Url>Add+Annotation+in+an+Existing+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Particular Annotation from a PDF File</Title>
                  <Description>All the annotations for a particular page can be found in the Annotations collection of that Page. In order to get a particular annotation, you need to specify an Index of the annotation. This will return an object of type Annotation and you will have to cast it to a particular type of the annotation i.e. TextAnnotation etc.</Description>
                  <FolderName>GetParticularAnnotationFromPDFFile</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Get Particular Annotation from a PDF File</DisplayName>
                    <Url>Get+Particular+Annotation+from+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get All Annotations from the Page of a PDF document</Title>
                  <Description>In order to get all the annotations from the page of a PDF document, you need to loop through the Annotations collection of that particular Page. Please note that, if you want to get all the annotations from the whole PDF, you will have to loop through the Pages collection of the document as well, before navigating through the Annotations collection. You can get each annotation of the collection in a base annotation type called MarkupAnnotation and then show its properties.</Description>
                  <FolderName>GetAllAnnotationsFromPageOfPDFDocument</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Get All Annotations from the Page of a PDF document</DisplayName>
                    <Url>Get+All+Annotations+from+the+Page+of+a+PDF+document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Delete a Particular Annotation from the PDF File</Title>
                  <Description>In order to delete a particular annotation from a PDF, you need to call the Delete method of the Annotations collection. This collection belongs to the Page object where the annotation exists. The Delete method requires the Index of the annotation which needs to be deleted. After that, save the update PDF file.</Description>
                  <FolderName>DeleteParticularAnnotationFromPDFFile</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Delete a Particular Annotation from the PDF File</DisplayName>
                    <Url>Delete+a+Particular+Annotation+from+the+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Delete All Annotations from a Page of a PDF File</Title>
                  <Description>Annotations collection contains all the annotations for that particular page. In order to delete all the annotations from that page, you need to call the Delete method of the Annotations collection.</Description>
                  <FolderName>DeleteAllAnnotationsFromPageOfPDFFile</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Delete All Annotations from a Page of a PDF File</DisplayName>
                    <Url>Delete+All+Annotations+from+a+Page+of+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Add Swf file as annotation to PDF document</Title>
                  <Description>The annotations in a PDF document are contained in Annotations collection of a particular Page. This collection contains the annotaitons for that individual page only, so every page has its own Annotations collection. In order to add an annotation in a particular page, you need to add it to the Annotations collection of that page using Add method. However in order to support the feature of including SWF files as annotation inside the PDF document, we need to try using ScreenAnnotation class present under Aspose.Pdf.InteractiveFeatures.Annotations namespace.</Description>
                  <FolderName>AddSwfFileAsAnnotationToPDFDocument</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Add Swf file as annotation to PDF document</DisplayName>
                    <Url>Add+swf+file+as+annotation+to+PDF+document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\input.swf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Set Formatting of FreeTextAnnotation</Title>
                  <Description>The annotations are contained by the Annotations collection of a particular Page and every page has its own Annotations collection. When adding FreeTextAnnotation in PDF document, we can specify the formatting information i.e. Font Face, Size, Color etc using DefaultAppearance or we can even specify the formatting information using TextStyle property. Furthermore, we can also update the formatting of FreeTextAnnotation already present in existing PDF document.</Description>
                  <FolderName>SetFormattingOfFreeTextAnnotation</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Set Formatting of FreeTextAnnotation</DisplayName>
                    <Url>Set+Formatting+of+FreeTextAnnotation</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working with Attachments</Title>
              <Description>This section includes the following examples:

1: Add Attachment in a PDF Document
2: Get Individual Attachment from a PDF Document
3: Get All the Attachments from a PDF Document
4: Delete all Attachments from PDF document
5: Get Information of an Attachment</Description>
              <FolderName>WorkingWithAttachments</FolderName>
              <Order>6</Order>
              <Examples>
                <Example>
                  <Title>Add Attachment in a PDF Document</Title>
                  <Description>In order to add attachment in a PDF document, you need to create a FileSpecification object with the file, which needs to be added, and the file description. After that the FileSpecification object can be added to EmbeddedFiles collection of Document object using collection Add method. The EmbeddedFiles collection contains all the attachments added in the PDF file.</Description>
                  <FolderName>AddAttachmentInPDFDocument</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Add Attachment in a PDF Document</DisplayName>
                    <Url>Add+Attachment+in+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\test.txt</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Individual Attachment from a PDF Document</Title>
                  <Description>EmbeddedFiles collection of the Document object contains all the attachments. Each element of this collection represents a FileSpecification object. If you want to get an individual attachment from the collection, you can do so by using Index value. The Index represents the number of the file to be fetched. This way, you will be able to get a FileSpecification object. Once this object is available, you can retrieve either all the properties of the attached file or the file itself.</Description>
                  <FolderName>GetIndividualAttachmentFromPDF</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Get Individual Attachment from a PDF Document</DisplayName>
                    <Url>Get+Individual+Attachment+from+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\test.txt</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get All the Attachments from a PDF Document</Title>
                  <Description>In order to get all the attachments from the PDF file, you need to loop through the EmbeddedFiles collection of the Document object. EmbeddedFiles collection contains all the attachments. Each element of this collection represents a FileSpecification object. Each iteration of the foreach loop through the EmbeddedFiles collection will return a FileSpecification object. Once this object is available, you can retrieve either all the properties of the attached file or the file itself.</Description>
                  <FolderName>GetAlltheAttachmentsFromPDF</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Get All the Attachments from a PDF Document</DisplayName>
                    <Url>Get+All+the+Attachments+from+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\1.txt</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\2.txt</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Delete all Attachments from PDF document</Title>
                  <Description>The attachments of the PDF document can found in the EmbeddedFiles collection of the Document object. In order to delete all the attachments, you only need to call the Delete method of the EmbeddedFiles collection and then save the updated file using Save method of the Document object.</Description>
                  <FolderName>DeleteAllAttachmentsFromPDF</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Delete all Attachments from PDF document</DisplayName>
                    <Url>Delete+all+Attachments+from+PDF+document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Information of an Attachment</Title>
                  <Description>FileSpecification object provides properties like Name, Description, MIMEType and Params which provide the information about the attachment. First three properties are quite evident from their names, while Params property provides the information about the file parameters. These parameters include CheckSum, CreationDate, ModDate and Size. In order to get these parameters, you first need to make sure that the Params property is not null.</Description>
                  <FolderName>GetInformationOfAttachment</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Get Information of an Attachment</DisplayName>
                    <Url>Get+Information+of+an+Attachment</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working with Bookmarks</Title>
              <Description>This section includes the following examples:


1: Add a Bookmark in the PDF Document
2: Add a Child Bookmark in the PDF Document
3: Delete All Bookmarks from the PDF Document
4: Delete a Particular Bookmark from the PDF Document
5: Get Bookmarks from the PDF Document
6: Get ChildBookmarks From the PDF Document
7: Update Bookmarks in a PDF Document
8: Update Child Bookmarks in a PDF Document</Description>
              <FolderName>WorkingWithBookmarks</FolderName>
              <Order>7</Order>
              <Examples>
                <Example>
                  <Title>Add a Bookmark in the PDF Document</Title>
                  <Description>A bookmark can be added in a PDF document using OutlineItemCollection. First of all, you need to open the PDF document using Document object. After that, you can add the OutlineItemCollection in the Outlines collection of the Document object. However, before adding the OutlineItemCollection in the Outlines collection, you need to define the properties of the bookmark.</Description>
                  <FolderName>AddBookmarkInPDF</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Add a Bookmark in the PDF Document</DisplayName>
                    <Url>Add+a+Bookmark+in+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Add a Child Bookmark in the PDF Document</Title>
                  <Description>In this example we will see how to add child bookmark in a PDF document using Aspose.Pdf.</Description>
                  <FolderName>AddChildBookmarkPDF</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Add a Child Bookmark in the PDF Document</DisplayName>
                    <Url>Add+a+Child+Bookmark+in+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Delete All Bookmarks from the PDF Document</Title>
                  <Description>The Outline collection contains all the bookmarks of the PDF document. In order to delete all the bookmarks from the PDF file, you only need to call the Delete method of Outlines collection and then save the modified file using Save method of the Document object.</Description>
                  <FolderName>DeleteAllBookmarksFromPDF</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Delete All Bookmarks from the PDF Document</DisplayName>
                    <Url>Delete+All+Bookmarks+from+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Delete a Particular Bookmark from the PDF Document</Title>
                  <Description>In order to delete a particular bookmark from the PDF file, you need to pass the bookmark title as parameter to the Delete method of the Outlines collection. The Outlines collection is provided by the Document object. The Delete method will remove the bookmark having the same Title as passed to the method. After that, just save the updated file using Save method of the Document object.</Description>
                  <FolderName>DeleteParticularBookmarkFromPDF</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Delete a Particular Bookmark from the PDF Document</DisplayName>
                    <Url>Delete+a+Particular+Bookmark+from+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Bookmarks from the PDF Document</Title>
                  <Description>The Outlines collection of the Document object contains all a PDF file's bookmarks. To get those bookmarks, loop through the Outlines collection and get each bookmark in OutlineItemCollection. The OutlineItemCollection provides access to all the bookmrark's attributes.</Description>
                  <FolderName>GetBookmarksFromPDF</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Get Bookmarks from the PDF Document</DisplayName>
                    <Url>Get+Bookmarks+from+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get ChildBookmarks From the PDF Document</Title>
                  <Description>In order to get all the bookmarks you need to loop through the Outlines collections of Document object. However, if you want to get the child bookmarks as well then you also need to loop through all the bookmarks in each OutlineItemCollection object obtained in the above mentioned loop.</Description>
                  <FolderName>GetChildBookmarksFromPDF</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Get ChildBookmarks From the PDF Document</DisplayName>
                    <Url>Get+ChildBookmarks+From+the+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Update Bookmarks in a PDF Document</Title>
                  <Description>If you want to update an existing bookmark in a PDF file, you first need to get the particular bookmark from the Outlines collection of the Document object by specifying the Index of the particular bookmark. Once you retrieve the bookmark into OutlineItemCollection object, you can update its properties and then save the updated PDF file using Save method.</Description>
                  <FolderName>UpdateBookmarksInPDF</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Update Bookmarks in a PDF Document</DisplayName>
                    <Url>Update+Bookmarks+in+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Update Child Bookmarks in a PDF Document</Title>
                  <Description>In order to update child bookmark, you first need to retrieve that particular child bookmark from the PDF file. You can do that by first getting the parent bookmark and then the child bookmark using appropriate Index values. You can get the particular bookmark from the Outlines collection of the Document object by specifying the Index of that bookmark, and then get the child bookmark by specifying the Index on this parent bookmark. Finally, you need to save the updated PDF file using Save method.</Description>
                  <FolderName>UpdateChildBookmarksInPDF</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Update Child Bookmarks in a PDF Document</DisplayName>
                    <Url>Update+Child+Bookmarks+in+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working with Document</Title>
              <Description>This section includes the following examples: 

1: Set Document Window and Page Display Properties
2: Get Document Window and Page Display Properties
3: Validate PDF Document for PDF A Standard (A 1A and A 1B)
4: Optimize PDF Document for the Web
5: Set PDF File Information
6: Get PDF File Information
7: Set XMP Metadata in a PDF File
8: Get XMP Metadata from PDF File
9: Add TOC in Existing PDF
10: Get-Set zoom factor of PDF file</Description>
              <FolderName>WorkingwithDocument</FolderName>
              <Order>8</Order>
              <Examples>
                <Example>
                  <Title>Set Document Window and Page Display Properties</Title>
                  <Description>This examples  helps you understand how to set properties of the document-s window, viewer application, and pages when displayed to the user. In order to set these different properties, you first need to open the PDF file using Document class. After that, you can set properties of the Document object like CenterWindow, Direction, DisplayDocTitle, HideMenuBar, HideToolBar, HideWindowUI, NonFullScreenPageMode, PageLayout and PageMode etc. You need to save the updated PDF file using Save method.</Description>
                  <FolderName>SetDocumentWindow</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Set Document Window and Page Display Properties</DisplayName>
                    <Url>Set+Document+Window+and+Page+Display+Properties</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Document Window and Page Display Properties</Title>
                  <Description>This example helps you understand how to get properties of the documen-s window, viewer application, and pages how they are displayed to the user. In order to set these different properties, you first need to open the PDF file using Document class. After that, you can set properties of the Document object like CenterWindow, Direction, DisplayDocTitle, HideMenuBar, HideToolBar, HideWindowUI, NonFullScreenPageMode, PageLayout and PageMode etc.</Description>
                  <FolderName>GetDocumentWindow</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Get Document Window and Page Display Properties</DisplayName>
                    <Url>Get+Document+Window+and+Page+Display+Properties</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Optimize PDF Document for the Web</Title>
                  <Description>Optimization or linearization refers to the process of making a PDF file suitable for online browsing using a web browser. Aspose.Pdf allows you to optimize the PDF files. You can use Optimize method of the Document class. And finally you need to save the optimized document using Save method.</Description>
                  <FolderName>OptimizePDFDocument</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Optimize PDF Document for the Web</DisplayName>
                    <Url>Optimize+PDF+Document+for+the+Web</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Set PDF File Information</Title>
                  <Description>Aspose.Pdf allows you to set file specific information of a PDF file like Author, CreationDate, Subject, and Title etc. In order to set this information, you need to create a DocumentInfo object and set the values of these individual properties. Once the values are set you can simply save the updated document using Save method of the Document object.</Description>
                  <FolderName>SetPDFFileInformation</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Set PDF File Information</DisplayName>
                    <Url>Set+PDF+File+Information</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Validate PDF Document for PDF A Standard (A 1A and A 1B)</Title>
                  <Description>In order to validate a PDF document for PDF/A-1a or PDF/A-1b standard, you can use Validate method of Document class. This method allows you to specify the name of the file in which the result is to be saved and the required validation type PdfFormat enumeration : PDF_A_1A or PDF_A_1B.</Description>
                  <FolderName>ValidatePDFforPDFAStandard</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Validate PDF Document for PDF A Standard (A 1A and A 1B)</DisplayName>
                    <Url>Validate+PDF+Document+for+PDF+A+Standard+%28A+1A+and+A+1B%29</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\validation-result-A1A.xml</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get PDF File Information</Title>
                  <Description>In order to get file specific information of a PDF file, you first need to get the DocumentInfo object using Info property of the Document object. Once the DocumentInfo object is retrieved, you can get the values of the individual properties.</Description>
                  <FolderName>GetPDFFileInformation</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Get PDF File Information</DisplayName>
                    <Url>Get+PDF+File+Information</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Set XMP Metadata in a PDF File</Title>
                  <Description>Aspose.Pdf allows you to set metadata in a PDF file. In order to set metadata, you need to create a Document object and set the values using Metadata property. Once the values are set you can simply save the updated document using Save method of the Document object.</Description>
                  <FolderName>SetXMPMetadata</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Set XMP Metadata in a PDF File</DisplayName>
                    <Url>Set+XMP+Metadata+in+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get XMP Metadata from PDF File</Title>
                  <Description>In order to get metadata of a PDF file, you first need to create the Document object and open the input PDF file. After that, you can get the metadata using Metadata property of the Document object.</Description>
                  <FolderName>GetXMPMetadata</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Get XMP Metadata from PDF File</DisplayName>
                    <Url>Get+XMP+Metadata+from+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Add TOC in Existing PDF</Title>
                  <Description>To support adding a TOC to an existing PDF file, a Heading class is available in the Aspose.Pdf namespace. The Aspose.Pdf namespace can both create new and manipulate existing PDF files. To add a TOC to an existing PDF, use the Aspose.Pdf namespace.</Description>
                  <FolderName>AddTOCInExistingPDF</FolderName>
                  <Order>9</Order>
                  <DocLink>
                    <DisplayName>Add TOC in Existing PDF</DisplayName>
                    <Url>Add+TOC+in+Existing+PDF</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\TOC_Output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
              <Folders>
                <Folder>
                  <Title>Get-Set Zoom Factor of PDF file</Title>
                  <Description>This section includes the following examples:

1: Set Zoom Factor
2: Get Zoom Factor</Description>
                  <FolderName>GetSetZoomFactor</FolderName>
                  <Order>10</Order>
                  <Examples>
                    <Example>
                      <Title>Set Zoom Factor</Title>
                      <Description>This example shows how to set the zoom factor of PDF file using Aspose.Pdf for .NET.</Description>
                      <FolderName>SetZoomFactor</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Get-Set zoom factor of PDF file</DisplayName>
                        <Url>Get-Set+zoom+factor+of+PDF+file</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\input.pdf</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Zoomed_pdf.pdf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Get Zoom Factor</Title>
                      <Description>This example shows how to get the zoom factor information from a PDF document using Aspose.Pdf for .NET.</Description>
                      <FolderName>GetZoomFactor</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Get-Set zoom factor of PDF file</DisplayName>
                        <Url>Get-Set+zoom+factor+of+PDF+file</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Zoomed_pdf.pdf</Path>
                        </DataFile>
                      </InputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Forms</Title>
              <Description>This section includes the following examples:

- Add Form Field in a PDF Document
- Delete a Particular Form Field from a PDF Document
- Modify Form Field in a PDF Document
- Fill Form Field in a PDF Document
- Get Value from an Individual Field of PDF Document
- Get Values from all the Fields of PDF Document
- Move Form Field to a New Location in a PDF File
- Preserve Extended Rights feature while working with Forms
- Add Tooltip to form field
- Get Form Fields from a Specific Region of PDF file
- Set Form Field Font Other Than the 14 Core PDF Fonts
- Convert Dynamic XFA form to Standard AcroForm
- working with XFA forms
- Determine if field is marked as required
- Set JavaScript on form field</Description>
              <FolderName>WorkingWithForms</FolderName>
              <Order>9</Order>
              <Examples>
                <Example>
                  <Title>Delete a Particular Form Field from a PDF Document</Title>
                  <Description>All the form fields are contained in the Form collection of the Document object. This collection provides different methods to manage form fields, including Delete method. If you want to delete a particular field, you can use Delete method and pass the field name as parameter. After that, you need to save the updated PDF document.</Description>
                  <FolderName>DeleteFormField</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Delete a Particular Form Field from a PDF Document</DisplayName>
                    <Url>Delete+a+Particular+Form+Field+from+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Modify Form Field in a PDF Document</Title>
                  <Description>Form collection of Document object allows you to manage all the form fields in a PDF document. If you want to modify an existing form field, you can get the particular field from the Form collection and set its properties. After that, you will have to save the updated PDF document.</Description>
                  <FolderName>ModifyFormField</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Modify Form Field in a PDF Document</DisplayName>
                    <Url>Modify+Form+Field+in+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Fill Form Field in a PDF Document</Title>
                  <Description>In order to fill a form field, you need to get the field from the Form collection of the Document object. After that, you can set the Value property of the field to set the field’s value. In this example, we have selected a TextBoxField and set its value using Value property.</Description>
                  <FolderName>FillFormField</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Fill Form Field in a PDF Document</DisplayName>
                    <Url>Fill+Form+Field+in+a+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Value from an Individual Field of PDF Document</Title>
                  <Description>The Value property of the form field allows you to get the value of a particular field. In order to get the value, you first need to get the form field from the Form collection of the Document object. In this example, we have selected a TextBoxField and retrieved its value using the Value property.</Description>
                  <FolderName>GetValueFromField</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Get Value from an Individual Field of PDF Document</DisplayName>
                    <Url>Get+Value+from+an+Individual+Field+of+PDF+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Values from all the Fields of PDF Document</Title>
                  <Description>In order to get values from all the fields of a PDF document, you need to navigate through all the form fields and then get the value using Value property. You can get each field, from the Form collection, in the base field type called Field and access its Value property.</Description>
                  <FolderName>GetValuesFromAllFields</FolderName>
                  <Order>6</Order>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Move Form Field to a New Location in a PDF File</Title>
                  <Description>If you want to move a form field to a new location in the PDF page, you first need to get that particular object and then specify new value for its Rect property. A Rectangle object with new coordinates is assigned to the Rect property. After that, you only need to save the updated PDF using Save method of Document object.</Description>
                  <FolderName>MoveFormField</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Move Form Field to a New Location in a PDF File</DisplayName>
                    <Url>Move+Form+Field+to+a+New+Location+in+a+PDF+File</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Add Tooltip to form field</Title>
                  <Description>The Document class provides a collection named Form which helps you manage form fields in a PDF document. To let you add a tooltip to a form field, we have introduced a property named AlternateName to the Field class. Alternate name is used as field tooltip in Adobe Acrobat.</Description>
                  <FolderName>AddTooltipToField</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Add Tooltip to form field</DisplayName>
                    <Url>Add+Tooltip+to+form+field</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Get Form Fields from a Specific Region of PDF file</Title>
                  <Description>In order to get the form fields from a specific region of a PDF file, you need to open the PDF file using Document object. After that, you can get the Form from the Forms collection of PDF document using the document Object. Now, to get the fields from a specific region, you can specify the Rectangular Region and pass it to GetFieldsInRect method of Form object. A collection of Fields will be returned which can be used to manipulate the fields.</Description>
                  <FolderName>GetFieldsFromARegion</FolderName>
                  <Order>9</Order>
                  <DocLink>
                    <DisplayName>Get Form Fields from a Specific Region of PDF file</DisplayName>
                    <Url>Get+Form+Fields+from+a+Specific+Region+of+PDF+file</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
              <Folders>
                <Folder>
                  <Title>Add Form Field in a PDF Document</Title>
                  <Description>This section includes the following examples:

- Adding TextBox Field
- Adding RadioButton Field
- Adding ComboBox Field</Description>
                  <FolderName>AddFormFieldPDF</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Adding TextBox Field</Title>
                      <Description>The following example show how to add TextBoxField field in a PDF document using Aspose.Pdf API.</Description>
                      <FolderName>AddingTextBoxField</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Add Form Field in a PDF Document</DisplayName>
                        <Url>Add+Form+Field+in+a+PDF+Document</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\input.pdf</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.pdf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Adding RadioButton Field</Title>
                      <Description>The following example shows how to add RadioButtonField in a PDF document using Aspose.Pdf API.</Description>
                      <FolderName>AddingRadioButtonField</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Add Form Field in a PDF Document</DisplayName>
                        <Url>Add+Form+Field+in+a+PDF+Document</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.pdf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Adding ComboBox Field</Title>
                      <Description>The following example shows how to add ComboBox field in a PDF document using Aspose.Pdf API.</Description>
                      <FolderName>AddingComboBoxField</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Add Form Field in a PDF Document</DisplayName>
                        <Url>Add+Form+Field+in+a+PDF+Document</Url>
                      </DocLink>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
          </Folders>
        </Folder>
        <Folder>
          <Title>Working with Aspose.Pdf.Generator</Title>
          <Description>This section includes examples related to the following topics: 

- Introduction to XML Technologies (Generator)
- Aspose.Pdf for .NET Document Object Model (DOM)
- Your First Application using Aspose.Pdf for .NET
- Working with Document (Generator)
- Working with Sections (Generator)
- Working with Paragraphs (Generator)
- Working with Floating Box (Generator)
- Working with Text (Generator)
- Working with Graphs (Generator)
- Working with Images (Generator)
- Working with Headings (Generator)
- Working with Tables (Generator)
- Working with Hyperlinks (Generator)
- Working with Attachments and Annotations (Generator)
- Working with Security Features (Generator)
- Utility Features (Generator)
- Conversion Features (Generator)
- Advance Features (Generator)</Description>
          <FolderName>WorkingWithAsposePdfGenerator</FolderName>
          <Order>2</Order>
          <Examples>
            <Example>
              <Title>Convert XSL-FO to PDF format</Title>
              <Description>XSL-FO stands for eXtensible Stylesheet Language Formatting Objects. It's a language for describing a styled document completely. The XSL-FO document contains the medium and appearance specific Formatting Objects that make up the page (or for audio output, the speech). For the print medium, formatting objects can include characters, blocks of text, images, tables, borders, master pages and so on.

Conversion of an XML document tree into various supported output formats, is a common need in applications and usually it’s a two-step process
- Convert the XML source to an XSL-FO representation.
- Convert the XSL-FO representation to the target format.

This example provides complete demonstration of the almost all possible ways to convert XSL-FO files in any form to PDF document. The example also describes that how developers can set Meta information of the PDF documents. In the early lines of code, it is also practiced about how to set license for Aspose.Pdf. These lines are commented for the developers using evaluation versions of Aspose.Pdf. If you have bought a license of Aspose.Pdf then you should un-comment those lines.</Description>
              <FolderName>ConvertXSLFOToPDF</FolderName>
              <Order>1</Order>
              <DocLink>
                <DisplayName>Converting XSL FO to PDF</DisplayName>
                <Url>Converting+XSL+FO+to+PDF</Url>
              </DocLink>
              <InputFiles>
                <DataFile>
                  <Path>..\Data\test.fo</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\test.xml</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\test.xsl</Path>
                </DataFile>
              </InputFiles>
              <OutputFiles>
                <DataFile>
                  <Path>..\Data\Test.pdf</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\test_fo_doc2string.pdf</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\test_fo_sring2string.pdf</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\test_fo_stream2string.pdf</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\test_xml_string2string.pdf</Path>
                </DataFile>
              </OutputFiles>
              <Type>Console</Type>
            </Example>
          </Examples>
          <Folders>
            <Folder>
              <Title>Conversion Features (Generator)</Title>
              <Description>This section includes examples related to the following topics: 

- Converting PCL file to PDF format
- Converting XSL FO to PDF
- Converting SVG file to PDF format
- HTML to PDF conversion</Description>
              <FolderName>ConversionFeatures</FolderName>
              <Order>2</Order>
              <Examples>
                <Example>
                  <Title>HTML to PDF conversion</Title>
                  <Description>Aspose.Pdf for .NET fully supports HTML 4.1 and CSS 2.1. However HTML5 is partially supported i.e. The feature 'Canvas' object of HTML5 is not yet implemented. Our component do support CSS3 standard but the support is still partial.</Description>
                  <FolderName>ConvertHTMLToPDF</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>HTML to PDF conversion</DisplayName>
                    <Url>HTML+to+PDF+conversion</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\Aspose.htm</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\HTML2pdf.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
    <Folder>
      <Title>Knowledge Base</Title>
      <Description>This section includes examples related to the following topics: 

- Tips and Tricks
- Technical Articles
- Known Issues
- Migration from Earlier Versions of Aspose.Pdf for .NET
- Migration from Adobe Acrobat Automation to Aspose
- Use Aspose.Pdf for .NET in Other Programming Languages
- Integration with Aspose.Total Components</Description>
      <FolderName>KnowledgeBase</FolderName>
      <Order>2</Order>
      <Folders>
        <Folder>
          <Title>Technical Articles</Title>
          <Description>This section includes examples related to the following topics: 

- Aspose.Pdf.Generator Articles
- Aspose.Pdf.Facades Articles
- Aspose.Pdf Articles</Description>
          <FolderName>TechnicalArticles</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Aspose.Pdf.Generator Articles</Title>
              <Description>This Section includes examples related to following topics: 

- Adding Image in table Cell
- Bind XML and work with individual objects
- Display Currency symbol with table values
- Export Excel Worksheet data into PDF table
- Fonts embedding while creating PDF
- How to Convert an Image to PDF
- How to Convert a text file to PDF
- How to convert HTML to PDF using InLineHTML approach
- How to Convert MemoryStream Image to PDF
- How to Create MultiLayer PDF document
- How to Create PDF A 1 with Aspose.Pdf
- How to dynamically set columns width in a Table row
- How to Figure out if the table will break in current page
- How to Remove Hyperlinks from Text during HTML to PDF conversion
- How to Set page orientation according to image dimensions
- Image and Page Number in Header Footer section
- Performance Improvement while converting TIFF to PDF
- Placing a text around an image
- Read Database, Create PDF and send it as an attachment with email
- Table in Header Footer section
- Using hyphenation while creating PDF</Description>
              <FolderName>AsposePdfGeneratorArticles</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>Convert Text File to PDF</Title>
                  <Description>This example explains how to easily and efficiently convert a text file to PDF using Aspose.Pdf.</Description>
                  <FolderName>ConvertTextFileToPDF</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>How to Convert a text file to PDF</DisplayName>
                    <Url>How+to+Convert+a+text+file+to+PDF</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\test.txt</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\output.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Convert an Image to PDF</Title>
                  <Description>Images are one of the major data components beside text information, which are shared among different users. Sharing the Images in PDF format is also a very convenient way. Keeping this aspect in mind, Aspose.Pdf has been designed to support the conversion of Images into PDF format.

In our DOM (document object model) every PDF file is comprised of sections, and each section contains paragraphs. Whereas a paragraph can comprise of text, and image file, Table, Floating Box, Graph, Heading, form field or an attachment. So in order to convert and image file into PDF format, we must enclose it into a paragraph.

To add an image, simply create an object of Image class, add the image to paragraphs collection of a section, specify the location where an image is placed and specify the image type. For that reason we have a class named ImageInfo which offers the capability to define the image source. This examples explains the concept of converting an image to PDF in detail.</Description>
                  <FolderName>ConvertImageToPDF</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>How to   Convert an Image to PDF</DisplayName>
                    <Url>How+to+++Convert+an+Image+to+PDF</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\aspose.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\aspose.bmp</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\aspose.tif</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\jpegOutput.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\resizedBmpOutput.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\tifOutput.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Image and Page Number in Header Footer section</Title>
                  <Description>While creating a document we often require adding a watermark in the Header/Footer section of the PDF file. Whereas a watermark can be a text logo or an image file. Aspose.Pdf facilitates you to add both image and text information into the Header/Footer section. Sometimes we may require adding the page number information in the Header/Footer section. To server this purpose, Aspose.Pdf has a set of replaceable symbols, where Replaceable symbols are special symbols in text string that can be replaced with corresponding content at run time. $P displays total number of pages in the document &amp; $p displays the page number of current page in the document.
For more information and details of supported replaceable symbols offered by Aspose.Pdf please visit http://www.aspose.com/docs/display/pdfjava/Replaceable+Symbols.

This example displays Image in Header section and Page number information in Footer section of the PDF file.</Description>
                  <FolderName>ImagePageNumberInHeaderFooter</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Image  and  Page Number in Header Footer section</DisplayName>
                    <Url>Image++and++Page+Number+in+Header+Footer+section</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\aspose.jpg</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\pdfWithHeaderAndPageNos.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Table in Header Footer Section</Title>
                  <Description>This example describes addition of Table in Header section of a PDF. The header of a page uses the top margin area of the page, which means the height of the header can't be larger than the top margin of the page. Similarly, Footer is a special area on the bottom of the page and uses the bottom margin area of the page. If the Header or Footer is larger than the top or bottom margin of the page respectively, the top or bottom margin will be enlarged automatically.</Description>
                  <FolderName>TableInHeaderFooter</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Table in Header Footer section</DisplayName>
                    <Url>Table+in+Header+Footer+section</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\asposelogo.png</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\Table_in_Header.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Adding Image in Table Cell</Title>
                  <Description>According to our DOM (Document Object Model) a document is composed of Sections. Where a section may be a Header/Footer or a body of the document. A section contains one or more paragraphs, and a paragraph may be an Image, a text, a form field, Heading, FloatingBox, graph, attachment, or a table. Whereas, a table has a collection of Rows, a row has a collection of Cells and a cell is a collection of Paragraphs. So, as according to our DOM, a table cell may contain any of the paragraph elements specified above which also includes images. One must have a clear understanding of cell width, especially when displaying an image in table cell, so that the image width should be fixed according to the width of a cell, in order to display it properly. Width of an Image can be fixed by setting the FixWidth property of ImageInfo class. In this case the image is scaled to the fixed width of table cell. This example discusses this concept in detail.</Description>
                  <FolderName>AddImageInTableCell</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Adding Image in table Cell</DisplayName>
                    <Url>Adding+Image+in+table+Cell</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\aspose.jpg</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\Image_in_Cell.pdf</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
  </Folders>
</Data>